import java.util.Scanner;
import java.util.regex.Matcher;


/*
 * String matching with KMP
 */

public class StringMatching2
{
	//**********************************************************************************
	  
	  
        public static void main(String[] args)
        {
                Scanner sc = new Scanner(System.in);

                while (sc.hasNext() != false)
                {
                        String pattern = sc.nextLine(); //get the pattern and text
                        String text = sc.nextLine();
                        findPattern( pattern, text);                                    // this will print

                }


                sc.close();
        }

        /*
         * input :2 strings => a pattern, a text
         * output: void, effect = print position at which all the patterns apears in the text separated by a single space
         */
        public static void findPattern(String pattern,String text)
        {
            int[] prefixes = computePrefix(pattern);
        	
        	match(pattern,text,prefixes);
        
        }
        
        //we compute all the possible prefixes for future use *when we have a mismatch
        public static int[] computePrefix(String pattern)
        {
			int[] prefixes = new int[pattern.length()];
			int j = 0;
			for(int i =1; i < pattern.length();i++ )//*****check off by 1
			{
				while( j>0 && prefixes[j] != prefixes[i])
				{
					j=prefixes[j-1];
				}
				
				if(pattern.charAt(j) == pattern.charAt(i) )
				{
					j++;
				}
				prefixes[i] = j ;
			}

        	return prefixes ;
        
        }
        
        public static void match(String pattern,String text,int[] prefixes)
        {
        	//j = text pointer/ i = pattern pointer
        	int i=0;
        	for(int j=1;j<=text.length();)       
        	{
        		while(i>0 && prefixes[i+1] != text.charAt(j))
        		{
        			i = prefixes[i]; //increment with the prefixes
        		}
        		if( prefixes[i+1] == text.charAt(j))
        			{
        			i = i+1;
        			}
        		if (i == pattern.length()) //match found
        		{
        			System.out.print((j - pattern.length() + 1) + " " );
        			i = prefixes[i];
        		}
        	}
           	
        }
        
       
        
        
}
